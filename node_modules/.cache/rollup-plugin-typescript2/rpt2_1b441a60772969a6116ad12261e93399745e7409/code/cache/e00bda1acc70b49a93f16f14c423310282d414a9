{"code":"import { __extends } from \"tslib\";\r\nimport Constantes from '../constantes';\r\nvar PlataformasMoviles = /** @class */ (function (_super) {\r\n    __extends(PlataformasMoviles, _super);\r\n    function PlataformasMoviles(escena, nombreObjeto, idObjeto, velocidad, horizontal) {\r\n        var _this = _super.call(this, escena.physics.world, escena) || this;\r\n        _this.escena = escena;\r\n        _this.velocidad = velocidad;\r\n        _this.horizontal = horizontal;\r\n        var nombreObjetoPlataforma = (_this.horizontal) ? Constantes.MAPAS.PLATAFORMAHORIZONTAL : Constantes.MAPAS.PLATAFORMAVERTICAL;\r\n        // a√±ade los objetos de los enemigos desde el array de sprites obtenidos del mapa al grupo        \r\n        _this.addMultiple(_this.escena.mapaNivel.createFromObjects(nombreObjeto, { name: nombreObjetoPlataforma, key: idObjeto }));\r\n        _this.children.entries.map(function (plataforma) {\r\n            plataforma.setTexture(idObjeto);\r\n            plataforma.body.setCollideWorldBounds(true);\r\n            plataforma.body.setAllowGravity(false);\r\n            plataforma.body.setImmovable(true);\r\n            if (_this.horizontal) {\r\n                plataforma.body.setFrictionX(1);\r\n                plataforma.body.setVelocityX(_this.velocidad);\r\n                _this.muevePlataformaHorizontal((Phaser.Math.Between(0, 1) ? 'izda' : 'dcha'), plataforma);\r\n            }\r\n            else {\r\n                plataforma.body.setFrictionY(1);\r\n                plataforma.body.setVelocityY(_this.velocidad);\r\n                _this.muevePlataformaVertical((Phaser.Math.Between(0, 1) ? 'arriba' : 'abajo'), plataforma);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    PlataformasMoviles.prototype.muevePlataformaHorizontal = function (direccion, enemigo) {\r\n        (direccion === 'izda') ? enemigo.body.setVelocityX(this.velocidad * -1) : enemigo.body.setVelocityX(this.velocidad);\r\n    };\r\n    PlataformasMoviles.prototype.muevePlataformaVertical = function (direccion, enemigo) {\r\n        (direccion === 'arriba') ? enemigo.body.setVelocityY(this.velocidad * -1) : enemigo.body.setVelocityY(this.velocidad);\r\n    };\r\n    PlataformasMoviles.prototype.update = function () {\r\n        var _this = this;\r\n        this.children.entries.map(function (enemigo) {\r\n            if (_this.horizontal) {\r\n                if (enemigo.body.velocity.x === 0) {\r\n                    _this.muevePlataformaHorizontal((Phaser.Math.Between(0, 1) ? 'izda' : 'dcha'), enemigo);\r\n                }\r\n                if (enemigo.body.blocked.right) {\r\n                    _this.muevePlataformaHorizontal('izda', enemigo);\r\n                }\r\n                else if (enemigo.body.blocked.left) {\r\n                    _this.muevePlataformaHorizontal('dcha', enemigo);\r\n                }\r\n            }\r\n            else {\r\n                if (enemigo.body.velocity.y === 0) {\r\n                    _this.muevePlataformaVertical((Phaser.Math.Between(0, 1) ? 'arriba' : 'abajo'), enemigo);\r\n                }\r\n                if (enemigo.body.blocked.top) {\r\n                    _this.muevePlataformaVertical('arriba', enemigo);\r\n                }\r\n                else if (enemigo.body.blocked.bottom) {\r\n                    _this.muevePlataformaVertical('abajo', enemigo);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return PlataformasMoviles;\r\n}(Phaser.Physics.Arcade.Group));\r\nexport default PlataformasMoviles;\r\n","references":["/home/smm/Documentos/Pharser/videojuego/v10/src/constantes.ts","/home/smm/Documentos/Pharser/videojuego/v10/src/escenas/manejadornivel.ts"]}
