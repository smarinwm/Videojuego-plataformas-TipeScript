{"code":"import { __extends } from \"tslib\";\r\nimport Constantes from '../constantes';\r\nimport GestorBD from \"../basedatos/gestorbd\";\r\nvar Jugador = /** @class */ (function (_super) {\r\n    __extends(Jugador, _super);\r\n    function Jugador(config) {\r\n        var _this = _super.call(this, config.escena, config.x, config.y, config.texture) || this;\r\n        _this.escena = config.escena;\r\n        _this.escena.physics.world.enable(_this);\r\n        _this.escena.add.existing(_this);\r\n        _this.body.setSize(20, 30);\r\n        _this.setCollideWorldBounds(true);\r\n        //Control entrada\r\n        _this.cursores = _this.escena.input.keyboard.createCursorKeys();\r\n        _this.teclasWASD = _this.escena.input.keyboard.addKeys('W,A,S,D');\r\n        _this.teclaEspacio = _this.escena.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n        //Gamepad\r\n        _this.gamepad = null;\r\n        _this.gamepadIzda = false;\r\n        _this.gamepadDcha = false;\r\n        _this.gamepadArriba = false;\r\n        _this.scene.input.gamepad.once('down', function (pad) {\r\n            _this.gamepad = pad;\r\n        });\r\n        _this.play(Constantes.JUGADOR.ANIMACION.ESPERA);\r\n        //tiempo de espera para colisiones\r\n        _this.tiempoEsperaColisionActivo = false;\r\n        _this.recolectando = false;\r\n        //Sonidos                \r\n        _this.saltarAudio = _this.escena.sound.add(Constantes.SONIDOS.EFECTOS.SALTAR);\r\n        _this.caerSobreAudio = _this.escena.sound.add(Constantes.SONIDOS.EFECTOS.CAERSOBREENEMIGO);\r\n        _this.recolectarAudio = _this.escena.sound.add(Constantes.SONIDOS.EFECTOS.RECOLECTAR);\r\n        _this.vidaAudio = _this.escena.sound.add(Constantes.SONIDOS.EFECTOS.QUITARVIDA);\r\n        //BD\r\n        _this.mibd = new GestorBD();\r\n        return _this;\r\n    }\r\n    Jugador.prototype.update = function () {\r\n        //Gamepad\r\n        if (this.gamepad !== null) {\r\n            this.gamepadArriba = this.gamepad.up || this.gamepad.A;\r\n            this.gamepadDcha = this.gamepad.right;\r\n            this.gamepadIzda = this.gamepad.left;\r\n        }\r\n        //Control de Movimiento\r\n        if (this.teclasWASD.A.isDown || this.cursores.left.isDown || this.controlIzda || this.gamepadIzda) {\r\n            this.setVelocityX(-200);\r\n            if (this.body.blocked.down)\r\n                this.anims.play(Constantes.JUGADOR.ANIMACION.CORRER, true);\r\n            this.flipX = true;\r\n        }\r\n        else if (this.teclasWASD.D.isDown || this.cursores.right.isDown || this.controlDcha || this.gamepadDcha) {\r\n            this.setVelocityX(200);\r\n            if (this.body.blocked.down)\r\n                this.anims.play(Constantes.JUGADOR.ANIMACION.CORRER, true);\r\n            this.flipX = false;\r\n        }\r\n        else {\r\n            this.setVelocityX(0);\r\n            this.anims.play(Constantes.JUGADOR.ANIMACION.ESPERA, true);\r\n        }\r\n        if ((this.teclaEspacio.isDown || this.teclasWASD.W.isDown || this.cursores.up.isDown || this.controlSalto || this.gamepadArriba) && this.body.blocked.down) {\r\n            this.setVelocityY(-300);\r\n            this.anims.stop();\r\n            this.setTexture(Constantes.JUGADOR.ID, Constantes.JUGADOR.ANIMACION.SALTO);\r\n            this.reproduceAudio(this.saltarAudio);\r\n        }\r\n    };\r\n    /**\r\n     * Método que maneja la colisión entre el jugador y un objeto enemigo\r\n     * Se quita vida al jugador si enemigo tca al jugador\r\n     * Si jugador toca al enemigo desde arriba elimina enemigo e incrementa puntos\r\n     * El contexto this es desde dónde se llama por eso hay que usar jugador en lugar de this\r\n     * @param jugador\r\n     * @param enemigo\r\n     */\r\n    Jugador.prototype.enemigoToca = function (jugador, enemigo) {\r\n        //Hace desaparecer al enemigo si salta sobre él\r\n        if (jugador.body.velocity.y > 100 &&\r\n            enemigo.body.touching.up && jugador.body.touching.down) {\r\n            if (!jugador.tiempoEsperaColisionActivo) {\r\n                jugador.reproduceAudio(jugador.caerSobreAudio);\r\n                var posX = enemigo.x;\r\n                var posY = enemigo.y;\r\n                enemigo.destroy();\r\n                //incrementa marcador 100puntos\r\n                jugador.escena.puntuacion += 100;\r\n                jugador.escena.registry.set(Constantes.REGISTRO.PUNTUACION, jugador.escena.puntuacion);\r\n                jugador.escena.events.emit(Constantes.EVENTOS.PUNTUACION);\r\n                //añade efecto explosion con una animación que cuando se completa desaparece\r\n                var explosion_1 = jugador.escena.add.sprite(posX, posY, Constantes.ENEMIGOS.EXPLOSION.ID);\r\n                explosion_1.play(Constantes.ENEMIGOS.EXPLOSION.ANIM);\r\n                explosion_1.once('animationcomplete', function () {\r\n                    explosion_1.destroy();\r\n                });\r\n            }\r\n        }\r\n        else if (!jugador.tiempoEsperaColisionActivo) {\r\n            //quita vidas y actualiza HUD\r\n            jugador.reproduceAudio(jugador.vidaAudio);\r\n            jugador.escena.vidas--;\r\n            jugador.escena.registry.set(Constantes.REGISTRO.VIDAS, jugador.escena.vidas);\r\n            jugador.escena.events.emit(Constantes.EVENTOS.VIDAS);\r\n            //activa tiempoEspera ya que al ser un overlap está colisionando constantemente\r\n            jugador.tiempoEsperaColisionActivo = true;\r\n            //lo tiñe de rojo al jugador\r\n            jugador.tint = 0xff0000;\r\n            //añade evento de espera para volver a la normalidad\r\n            jugador.escena.time.addEvent({\r\n                delay: 600,\r\n                callback: function () {\r\n                    jugador.tiempoEsperaColisionActivo = false;\r\n                    jugador.tint = 0xffffff;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Jugador.prototype.recolecta = function (jugador, objeto) {\r\n        if (!jugador.recolectando) {\r\n            jugador.reproduceAudio(jugador.recolectarAudio);\r\n            jugador.recolectando = true;\r\n            jugador.escena.numObjetosRecolectar--;\r\n            jugador.escena.registry.set(Constantes.REGISTRO.OBJETOSRECOLECTAR, jugador.escena.numObjetosRecolectar);\r\n            jugador.escena.events.emit(Constantes.EVENTOS.RECOLECTAR);\r\n            if (jugador.escena.numObjetosRecolectar == 0) {\r\n                jugador.escena.objetofinal.setAlpha(1);\r\n                jugador.escena.objetofinalColision.active = true;\r\n            }\r\n            //incrementa marcador 50puntos\r\n            jugador.escena.puntuacion += 50;\r\n            jugador.escena.registry.set(Constantes.REGISTRO.PUNTUACION, jugador.escena.puntuacion);\r\n            jugador.escena.events.emit(Constantes.EVENTOS.PUNTUACION);\r\n            //realiza una animación para desaparecer\r\n            jugador.escena.tweens.add({\r\n                targets: objeto,\r\n                y: objeto.y - 100,\r\n                alpha: 0,\r\n                duration: 800,\r\n                ease: \"Cubic.easeOut\",\r\n                callbackScope: this,\r\n                onComplete: function () {\r\n                    jugador.recolectando = false;\r\n                    objeto.destroy();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Jugador.prototype.reproduceAudio = function (audio) {\r\n        if (this.mibd.datos.efectos) {\r\n            audio.play();\r\n        }\r\n    };\r\n    return Jugador;\r\n}(Phaser.Physics.Arcade.Sprite));\r\nexport default Jugador;\r\n","references":["/home/smm/Documentos/Pharser/videojuego/v10/src/constantes.ts","/home/smm/Documentos/Pharser/videojuego/v10/src/escenas/nivel1.ts","/home/smm/Documentos/Pharser/videojuego/v10/src/basedatos/gestorbd.ts"]}
